<?php
/**
 * @file
 * Install file for DIBS.
 */

// @todo implement system requirements.

/**
 * Implementation of hook_schema().
 */
function dibs_schema() {
  $schema['dibs_transactions'] = array(
    'description' => t('Stores dibs transactions'),
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'length' => 10,
        'description' => t('Transaction ID.'),
      ),
      'amount' => array(
        'type' => 'varchar',
        'length' => 64,
        'description' => t('The customers country'),
      ),
      'order_id' => array(
        'type' => 'varchar',
        'length' => 64,
        'description' => t('The customers email'),
      ),
      'hash' => array(
        'type' => 'varchar',
        'length' => 255,
        'description' => t('The customers email'),
      ),
      'lang' => array(
        'type' => 'varchar',
        'length' => 255,
        'description' => t('The customers email'),
      ),
      'status' => array(
        'type' => 'varchar',
        'length' => 255,
        'description' => t('The customers email'),
      ),
      'currency' => array(
        'type' => 'varchar',
        'length' => 3,
        'description' => t('The customers phone'),
      ),
      'retry_count' => array(
        'type' => 'int',
        'size' => 'small',
        'description' => t('The customers phone'),
      ),
      'email' => array(
        'type' => 'varchar',
        'length' => 64,
        'description' => t('The customers phone'),
      ),
      'billing_address' => array(
        'type' => 'varchar',
        'length' => 64,
        'description' => t('The customers phone'),
      ),
      'billing_address2' => array(
        'type' => 'varchar',
        'length' => 64,
        'description' => t('The customers phone'),
      ),
      'billing_first_name' => array(
        'type' => 'varchar',
        'length' => 64,
        'description' => t('The customers phone'),
      ),
      'billing_postal_code' => array(
        'type' => 'varchar',
        'length' => 64,
        'description' => t('The customers phone'),
      ),
      'billing_postal_place' => array(
        'type' => 'varchar',
        'length' => 64,
        'description' => t('The customers phone'),
      ),
      'billing_last_name' => [
        'type' => 'varchar',
        'length' => 64,
        'description' => t('The customers phone'),
      ],
      'created' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The Unix timestamp of the transaction was created.',
      ],
      'changed' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The Unix timestamp of the transaction was changed.',
      ],
    ),
    'indexes' => array(
      'hash' => array('hash'),
    ),
    'primary key' => array('id'),
  );

//  $schema['dibs_transactions_log'] = array(
//    'description' => t('Logs different events related to a transaction'),
//    'fields' => array(
//      'tid' => array(
//        'type' => 'int',
//        'unsigned' => TRUE,
//        'not null' => TRUE,
//        'length' => 10,
//        'description' => t('Transaction ID.'),
//      ),
//      'type' => array(
//        'type' => 'varchar',
//        'length' => 10,
//        'description' => t('Log record type'),
//      ),
//      'subtype' => array(
//        'type' => 'varchar',
//        'length' => 20,
//        'description' => t('Log record subtype. Used to thme a certain log line. Not required'),
//      ),
//      'log_text' => array(
//        'type' => 'varchar',
//        'length' => 255,
//        'description' => t('Log text.'),
//      ),
//      'log_value' => array(
//        'type' => 'varchar',
//        'length' => 32,
//        'description' => t('Log value. Used in combination with subtype.'),
//      ),
//      'time' => array(
//        'type' => 'datetime', // empty 'type' generates PHP notice
//        // 'mysql_type', 'pgsql_type', 'sqlite_type', etc.: If you need to use a record type not included in the officially supported list of types above, you can specify a type for each database backend. In this case, you can leave out the type parameter, but be advised that your schema will fail to load on backends that do not have a type specified.
//        // jfr. http://api.drupal.org/api/drupal/includes--database--schema.inc/group/schemaapi/7
//        'mysql_type' => 'datetime',
//        'pgsql_type' => 'timestamp',
//        'description' => t('Log time'),
//        'not null' => FALSE,
//      ),
//    ),
//    'indexes' => array(
//      'tid' => array('tid'),
//      'time' => array('time'),
//      'type' => array('type'),
//      'subtype' => array('subtype'),
//    ),
//  );

//  $schema['dibs_order_id_settings'] = array(
//    'description' => t('Used to store order id settings for each dibs implementation'),
//    'fields' => array(
//      'api_module' => array(
//        'type' => 'varchar',
//        'length' => 64,
//        'not null' => TRUE,
//        'default' => '',
//        'description' => t('API module name'),
//      ),
//      'api_delta' => array(
//        'type' => 'varchar',
//        'length' => 64,
//        'not null' => TRUE,
//        'default' => '',
//        'description' => t('API delta value'),
//      ),
//      'order_id' => array(
//        'type' => 'int',
//        'length' => 10,
//        'default' => 0,
//        'description' => t('Order id counter'),
//      ),
//      'order_id_prefix' => array(
//        'type' => 'varchar',
//        'length' => 10,
//        'not null' => TRUE,
//        'default' => '',
//        'description' => t('Order id prefix'),
//      ),
//      'order_id_suffix' => array(
//        'type' => 'varchar',
//        'length' => 10,
//        'not null' => TRUE,
//        'default' => '',
//        'description' => t('Order id suffix'),
//      ),
//    ),
//    'indexes' => array(
//      'api_idx' => array('api_module', 'api_delta'),
//      'order_id' => array('order_id'),
//    ),
//    'primary key' => array('api_module', 'api_delta'),
//  );

//  $schema['dibs_split_payments'] = array(
//    'description' => t('Used to store split payment transaction ids'),
//    'fields' => array(
//      'tid' => array(
//        'type' => 'int',
//        'unsigned' => TRUE,
//        'not null' => TRUE,
//        'description' => t('Transaction ID.'),
//      ),
//      'payment_transaction_id' => array(
//        'type' => 'int',
//        'unsigned' => TRUE,
//        'description' => t('Transaction id from DIBS.'),
//      ),
//      'delta' => array(
//        'type' => 'int',
//        'unsigned' => TRUE,
//        'description' => t('The transaction delta.'),
//      ),
//    ),
//    'primary key' => array('tid', 'payment_transaction_id'),
//  );

  return $schema;
}
