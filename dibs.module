<?php
/**
 * @file
 * Module Drupal API module for the DIBS payment service provider.
 */

/**
 * Defining some constants
 */
// The default module and delta. Settings from these are used as fall back
// if settings are missing for another implementation.
define('DIBS_DEFAULT_MODULE', 'dibs');
define('DIBS_DEFAULT_DELTA', 'default');

/**
 * @file
 * Handle DIBS payment integration
 */

/**
 * Implements hook_init().
 */
function dibs_init() {
  // Disabling cache on DIBS pages.
  if (arg(0) == 'payment' && arg(1) == 'dibs') {
    $GLOBALS['conf']['cache'] = FALSE;
  }
}

/**
 * Implements hook_perm().
 */
function dibs_perm() {
  return array('pay using dibs', 'administer dibs settings', 'administer dibs transactions');
}

/**
 * Implements hook_theme().
 */
function dibs_theme() {
  $themes = array();
  $themes['dibs_redirect_page'] = array(
    'arguments' => array('form' => NULL, 'settings' => NULL, 'transaction' => NULL),
    'template' => 'dibs-redirect-page',
  );
  $themes['dibs_cancel_page'] = array(
    'arguments' => array('form' => NULL, 'settings' => NULL, 'transaction' => NULL),
    'template' => 'dibs-cancel-page',
  );
  $themes['dibs_accept_page'] = array(
    'arguments' => array('settings' => NULL, 'transaction' => NULL),
    'template' => 'dibs-accept-page',
  );
  $themes['dibs_redirect_form'] = array(
    'arguments' => array('element' => NULL),
  );
  return $themes;
}

/**
 * Implements hook_menu().
 */
function dibs_menu() {
  $items = array();

  // Settings pages.
  $items['admin/settings/dibs'] = array(
    'page callback' => 'dibs_admin_settings_list',
    'title' => 'DIBS settings',
    'description' => 'Configure DIBS payment gateway.',
    'weight' => 1,
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer dibs settings'),
    'file' => 'dibs.admin.inc',
  );
  $items['admin/settings/dibs/edit/%/%'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dibs_admin_settings_form', 4, 5),
    'title' => 'Change DIBS implementation settings',
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer dibs settings'),
    'file' => 'dibs.admin.inc',
  );

  // Front end pages
  $items['payment/dibs/callbackok/%dibs_transaction_hash'] = array(
    'title' => 'DIBS callback ok url',
    'description' => '',
    'type' => MENU_CALLBACK,
    'page callback' => 'dibs_frontend_dibs_callback_ok',
    'page arguments' => array(3),
    'access callback' => TRUE,
    'file' => 'dibs.frontend.inc',
  );

  $items['payment/dibs/accept/%dibs_transaction_hash'] = array(
    'title' => 'DIBS payment accepted',
    'description' => '',
    'type' => MENU_CALLBACK,
    'page callback' => 'dibs_frontend_accept_page',
    'page arguments' => array(3),
    'access arguments' => array('pay using dibs'),
    'file' => 'dibs.frontend.inc',
  );

  $items['payment/dibs/cancel/%dibs_transaction_hash'] = array(
    'title' => 'DIBS payment cancelled',
    'description' => '',
    'type' => MENU_CALLBACK,
    'page callback' => 'dibs_frontend_cancel_page',
    'page arguments' => array(3),
    'access arguments' => array('pay using dibs'),
    'file' => 'dibs.frontend.inc',
  );

  $items['payment/dibs/redirect/%dibs_transaction_hash'] = array(
    'title' => 'Redirecting to DIBS payment',
    'description' => '',
    'type' => MENU_CALLBACK,
    'page callback' => 'dibs_frontend_redirect_page',
    'page arguments' => array(3),
    'access arguments' => array('pay using dibs'),
    'file' => 'dibs.frontend.inc',
  );

  return $items;
}

/**
 * Checking the user access
 *  - at least one of the arguments has to be valid.
 */
function dibs_admin_user_access() {
  $args = func_get_args();
  foreach ((array) $args[0] as $perm) {
    if (user_access($perm)) {
      return TRUE;
    }
  }
}

/**
 * Implements hook_dibsapi().
 *
 * The settings for option "default" will be used as fall back for other
 * implementations.
 */
function dibs_dibsapi($op = 'info', $delta = NULL, &$transaction = NULL, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'info':
      $info['default'] = array('info' => t('Default'));
      if (strlen($delta)) {
        return isset($info[$delta]) ? $info[$delta] : NULL;
      }
      else {
        return $info;
      }
      break;
  }
}

/**
 * Invoke hook_dibsapi on a specific module.
 *
 * Since we need to pass some arguments by reference, this override
 * is necessary - module_invoke can't pass by reference in PHP 5.3.
 *
 * @param string $module
 *   Name of the module to invoke hook_dibsapi on.
 * @param string $op
 *   Operation to ask the implementation to perform.
 * @param mixed $delta
 *   Delta - for implementing modules that have multiple
 *   implementations, these may be named/numbered by delta.
 * @param mixed $transaction
 *   The DIBS transaction data, if applicable. Passed by reference, so
 *   modules can alter it.
 * @param mixed $a3
 *   Polymorpic parameter 1. TODO: Document me.
 * @param mixed $a4
 *   Polymorpic parameter 2. TODO: Document me.
 *
 * @return mixed
 *   The return value of the invoked hook.
 */
function dibs_invoke($module, $op, $delta = NULL, &$transaction = NULL, $a3 = NULL, $a4 = NULL) {
  $implementation = $module . '_dibsapi';

  if (function_exists($implementation)) {
    return $implementation($op, $delta, $transaction, $a3, $a4);
  }
}

/**
 * Checking if a certain module and delta are the default one.
 *
 * @param stirng $module
 * @param multi $delta
 *
 * @return bool
 */
function dibs_is_default($module, $delta) {
  if ($module == DIBS_DEFAULT_MODULE && $delta == DIBS_DEFAULT_DELTA) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Finds and returns the value for a given setting
 *
 * @param string $module
 * @param string $delta
 * @param string $group
 * @param string $key
 * @param string $default_value
 *
 * @return string
 */
function dibs_get_settings_value($module, $delta, $group, $key, $default_value = '') {
  static $settings;
  if (!is_array($settings[$module][$delta])) {
    $settings[$module][$delta] = dibs_load_settings($module, $delta, FALSE);
  }
  return isset($settings[$module][$delta][$group][$key]) ? $settings[$module][$delta][$group][$key] : $default_value;
}

/**
 * Gets the next order ID for a certain module / delta.
 *
 * And, depending on the arguments, the record in the table
 * dibs_order_id_settings will be updated.
 *
 * @param string $module
 * @param string $delta
 * @param bool $update_table
 *   Should the record in the table dibs_order_id_settings be updated?
 * @param bool $add_prefix_suffix
 *   Should the prefix and suffix be added to the returned string
 * @param bool $fallback
 *   Should we fallback to the default setting if no settings exists?
 *
 * @return mixed
 */
function dibs_get_next_order_id($module, $delta, $update_table = TRUE, $add_prefix_suffix = TRUE, $fallback = TRUE) {
  db_lock_table('dibs_order_id_settings');
  $settings = db_fetch_array(db_query("SELECT * FROM {dibs_order_id_settings} WHERE api_module = '%s' AND api_delta = '%s'", $module, $delta));
  if (empty($settings) && $fallback) {
    // Unlocking tables.
    db_unlock_tables();

    // We try to get the data from the default setting instead.
    return dibs_get_next_order_id(DIBS_DEFAULT_MODULE, DIBS_DEFAULT_DELTA, $update_table, $add_prefix_suffix, FALSE);
  }
  elseif (is_array($settings)) {
    $next_order_id = $settings['order_id'] + 1;

    // Updating value in table.
    if ($update_table) {
      db_query("UPDATE {dibs_order_id_settings} SET order_id = %d WHERE api_module = '%s' AND api_delta = '%s'", $next_order_id, $module, $delta);
    }

    // Unlocking tables.
    db_unlock_tables();

    // Returns the found value.
    return $add_prefix_suffix ? $settings['order_id_prefix'] . $next_order_id . $settings['order_id_suffix'] : $next_order_id;
  }
  else {
    // Unlocking tables.
    db_unlock_tables();

    return NULL;
  }
}

/**
 * Loading settings array for a module and delta
 *
 * @param string $module
 * @param string $delta
 * @param bool $fallback
 *   If TRUE will we try to merge the settings array with the default one.
 */
function dibs_load_settings($module, $delta, $fallback = TRUE) {
  $settings = (array) variable_get('dibs_settings_' . $module . '_' . $delta, array());

  // Merge in default settings.
  if ($fallback && ($module != DIBS_DEFAULT_MODULE || $delta != DIBS_DEFAULT_DELTA)) {
    $default_settings = variable_get('dibs_settings_' . DIBS_DEFAULT_MODULE . '_' . DIBS_DEFAULT_DELTA, array());

    // Only overwrite empty values in the module/delta specific settings.
    foreach ((array) $default_settings as $group => $child) {
      if (is_array($child)) {
        foreach ($child as $key => $value) {
          if (drupal_strlen(trim($settings[$group][$key])) == 0) {
            $settings[$group][$key] = $value;
          }
        }
      }
      else {
        if (drupal_strlen(trim($settings[$group])) == 0) {
          $settings[$group] = $child;
        }
      }
    }
    return $settings;
  }
  else {
    $return = $settings;

    // Loading order id settings.
    $orderid = db_fetch_array(db_query("SELECT * FROM {dibs_order_id_settings} WHERE api_module = '%s' AND api_delta = '%s'", $module, $delta));

    // Merge arrays and return them.
    return array_merge($return, array('orderid' => $orderid));
  }
}

/**
 * Load a transaction from the hash value or the transaction id.
 *
 * @param $key
 *   Is either the transaction id (tid) or the hash value
 * @param $op
 *   Is either tid or hash.
 *
 * @return
 *   A fully-loaded $stransaction array upon successful transaction load
 *   or FALSE if transaction cannot be loaded.
 */
function dibs_transaction_load($key = NULL, $op = 'tid') {
  if ($op == 'tid' && is_numeric($key)) {
    $result = db_query('SELECT * FROM {dibs_transactions} WHERE tid = %d', $key);
  }
  elseif ($op == 'hash' && !empty($key)) {
    $result = db_query("SELECT * FROM {dibs_transactions} WHERE api_hash = '%s'", $key);
  }
  else {
    return FALSE;
  }
  if ($transaction = db_fetch_array($result)) {
    $transaction['order_info_long'] = unserialize($transaction['order_info_long']);
    $transaction['order_price_info'] = unserialize($transaction['order_price_info']);
    $transaction['params'] = !empty($transaction['params']) ? unserialize($transaction['params']) : array();
    return $transaction;
  }
  else {
    return FALSE;
  }
}

/**
 * Legacy name for dibs_transaction_load().
 *
 * Hold-over for backwards compatibility. Please switch to
 * dibs_transaction_load at earliest convenience.
 */
function dibs_load_transaction($key = NULL, $op = 'tid') {
  dibs_transaction_load($key = NULL, $op = 'tid');
}

/**
 * Load transaction by hash.
 */
function dibs_transaction_hash_load($key = NULL) {
  return dibs_transaction_load($key, 'hash');
}

/**
 * Preparing the payment
 * - Creating a transaction record in the db
 * - Redirecting the user to payment redirect page
 *
 * @param array $data
 * @param bool $redirect
 *   If set to FALSE will the function not automatically
 *   redirect the user to the DIBS form.
 *
 * @return
 * - If $redirect is set to FALSE, will the api_hash value
 *   be returned.
 */
function dibs_payment_prepare($data, $redirect = TRUE) {
  global $user;

  // Checking required data in $data array.
  if (!empty($data['api_module']) && strlen($data['api_delta'])) {
    $info = dibs_invoke($data['api_module'], 'info', $data['api_delta']);
    if (empty($info) || !is_array($info)) {
      drupal_set_message(t('Error preparing the payment: api_module and/or api_delta is not valid!'), 'error');
      return '';
    }
  }
  elseif (empty($data['api_module']) || !strlen($data['api_delta'])) {
    drupal_set_message(t('Error preparing the payment: api_module or api_delta is missing!'), 'error');
    return '';
  }

  if (empty($data['payment_price']) || (!is_numeric($data['payment_price']) && !is_float($data['payment_price'])) || $data['payment_price'] <= 0) {
    drupal_set_message(t('Error preparing the payment: payment_price is missing or not valid!'), 'error');
    return '';
  }

  // DIBS transaction data.
  $hash = isset($_SESSION['dibs'][$data['api_module']][$data['api_delta']]['hash']) ? $_SESSION['dibs'][$data['api_module']][$data['api_delta']]['hash'] : NULL;
  if (!empty($hash) && is_string($hash)) {
    // We are forcing the system to use a new transaction id for every load of this page,
    // therefore are we deleting the old transaction record.
    db_query("DELETE FROM {dibs_transactions} WHERE payment_status < 1 AND api_hash = '%s'", $hash);
    $hash = NULL;
  }

  // Getting DIBS settings.
  $settings = dibs_load_settings($data['api_module'], $data['api_delta']);

  // Adding default data to data array if some things missing.
  $data += array(
    'payment_transaction_type' => 'normal',
    'order_info_short' => '',
    'order_info_long' => array(),
    'order_price_info' => array(),
    'customer_uid' => $user->uid,
    'customer_name' => '',
    'customer_address' => '',
    'customer_address_2' => '',
    'customer_city' => '',
    'customer_zipcode' => '',
    'customer_country' => '',
    'customer_email' => $user->mail,
    'customer_phone' => '',
    'params' => array(),
  );

  // Generating order id.
  $order_id = !empty($data['payment_order_id']) ? $data['payment_order_id'] : dibs_get_next_order_id($data['api_module'], $data['api_delta']);

  // Creating new api_hash.
  $hash = sha1(time() . $order_id . drupal_get_private_key());

  // Creating dibs transaction.
  $transaction = array(
    'api_module' => $data['api_module'],
    'api_delta' => $data['api_delta'],
    'api_hash' => $hash,
    'order_info_short' => $data['order_info_short'],
    'order_info_long' => serialize($data['order_info_long']),
    'order_price_info' => serialize($data['order_price_info']),
    'payment_time' => date('Y-m-d H:i:s', time()),
    'payment_order_id' => $order_id,
    'payment_status' => 0,
    'payment_currency' => $settings['general']['currency'],
    'payment_price' => $data['payment_price'],
    'payment_transaction_type' => $data['payment_transaction_type'],
    'customer_uid' => $data['customer_uid'],
    'customer_name' => $data['customer_name'],
    'customer_address' => $data['customer_address'],
    'customer_address_2' => $data['customer_address_2'],
    'customer_city' => $data['customer_city'],
    'customer_zipcode' => $data['customer_zipcode'],
    'customer_country' => $data['customer_country'],
    'customer_email' => $data['customer_email'],
    'customer_phone' => $data['customer_phone'],
    'params' => serialize($data['params']),
  );
  $transaction_status = drupal_write_record('dibs_transactions', $transaction);

  if ($transaction_status != SAVED_NEW) {
    watchdog('dibs', 'Failed to save transaction to database, error code #@code.', array(
      '@code' => db_error(),
    ), WATCHDOG_ERROR);
  }

  // Saving new api_hash in session.
  $_SESSION['dibs'][$data['api_module']][$data['api_delta']]['hash'] = $hash;

  // Redirecting to the payment redirect page.
  if ($redirect) {
    drupal_goto('payment/dibs/redirect/' . $hash);
    exit;
  }

  return $hash;
}

/**
 * Create the hidden order line fields from
 * the order_info_long array in the transaction.
 *
 * @param array $data
 *
 * @return array $form
 */
function dibs_create_order_line_fields($data) {
  $form = array();
  if (is_array($data)) {
    if (is_array(current($data))) {
      $i = 0;
      foreach ($data as $line) {
        $j = 1;
        foreach ($line as $column) {
          $form['ordline' . $i . '-' . $j] = array(
            '#type' => 'hidden',
            '#value' => $column
          );
          $j++;
        }
        $i++;
      }
      $form['ordlinesx'] = array(
        '#type' => 'hidden',
        '#value' => $i,
      );
      $form['ordlinesy'] = array(
        '#type' => 'hidden',
        '#value' => $j - 1,
      );
    }
  }
  return $form;
}

/**
 * Create the hidden price info fields from
 * the order_price_info array in the transaction.
 *
 * @param array $data
 *
 * @return array $form
 */
function dibs_create_price_line_fields($data) {
  $form = array();
  if (is_array($data)) {
    $i = 1;
    $keys = array();
    foreach ($data as $key => $value) {
      $field = 'priceinfo' . $i . '.' . drupal_ucfirst($key);
      $keys[] = $field;
      $form[$field] = array(
        '#type' => 'hidden',
        '#value' => $value,
      );
      $i++;
    }
    $form['priceinfo_keys'] = array(
      '#type' => 'hidden',
      '#value' => implode(',', $keys),
    );
  }
  return $form;
}

/**
 * Create the hidden delivery info fields from
 * the customer fields in the transaction.
 *
 * @param array $data
 *
 * @return array $form
 */
function dibs_create_delivery_line_fields($data) {
  $form = array();
  if (is_array($data)) {
    $i = 1;
    $keys = array();
    foreach ($data as $key => $value) {
      if (strpos($key, 'customer_') !== FALSE && !empty($value)) {
        $key = str_replace('customer_', '', $key);
        $field = 'delivery' . $i . '.' . drupal_ucfirst($key);
        $keys[] = $field;
        $form[$field] = array(
          '#type' => 'hidden',
          '#value' => $value,
        );
        $i++;
      }
    }
    $form['delivery_keys'] = array(
      '#type' => 'hidden',
      '#value' => implode(',', $keys),
    );
  }
  return $form;
}

/**
 * Generate the MAC string.
 * 
 * @param array $form_values
 * @param string $hmac_hex_key 
 * 
 * @return string
 */
function dibs_generate_mac($form_values, $hmac_hex) {
  $mac = '';
  
  if (is_array($form_values)) {
    ksort($form_values);

    // Accepted keys
    $keys = array(
      'acceptReturnUrl', 
      'amount', 
      'callbackUrl', 
      'cancelReturnUrl', 
      'currency',
      'language',
      'merchant',
      'orderId',
      'test'
    );
  
    // Creating key=value string
    $key_value_string = '';
    foreach ($keys as $key) {
      if (isset($form_values[$key])) {
        if (is_array($form_values[$key])) {
          $value = $form_values[$key]['#value'];
        }
        else {
          $value = $form_values[$key];
        }
        if (!empty($value)) {
          if (strlen($key_value_string) > 0) {
            $key_value_string .= '&';
          }
          $key_value_string .= $key . '=' . (string)$value;
        }
      }
    }
    
    // Converts $hmac_string from a hex representation to a string representation.
    $hmac_string = "";
    foreach (explode("\n", trim(chunk_split($hmac_hex, 2))) as $h) {
      $hmac_string .= chr(hexdec($h));
    }    
    
    // Generate the MAC string.
    $mac = hash_hmac("sha256", $key_value_string, $hmac_string);   
  }
  
  return $mac;
}

/**
 * Generate the MAC string for the automated callback after payment.
 * 
 * @param array $form_values
 * @param string $hmac_hex_key 
 * 
 * @return string
 */
function dibs_generate_mac_callback($form_values, $hmac_hex) {
  $mac = '';
  
  if (is_array($form_values)) {
    ksort($form_values);

    // Creating key=value string
    $key_value_string = '';
    foreach ($form_values as $key => $value) {
      if ( $key != 'MAC' && !empty($value)) {
        if (strlen($key_value_string) > 0) {
          $key_value_string .= '&';
        }
        $key_value_string .= $key . '=' . (string)$value;
      }
    }
    
    // Converts $hmac_string from a hex representation to a string representation.
    $hmac_string = "";
    foreach (explode("\n", trim(chunk_split($hmac_hex, 2))) as $h) {
      $hmac_string .= chr(hexdec($h));
    }    
    
    // Generate the MAC string.
    $mac = hash_hmac("sha256", $key_value_string, $hmac_string);
  }
  
  return $mac;
}

/**
 * Preprocess function for the dibs_redirect_page theme
 *
 * @param array $variables
 */
function template_preprocess_dibs_redirect_page(&$variables) {
  $transaction = $variables['transaction'];
  $variables['template_files'][] = 'dibs-redirect-page-' . $transaction['api_module'];
  $variables['template_files'][] = 'dibs-redirect-page-' . $transaction['api_module'] . '-' . $transaction['api_delta'];
}

/**
 * Preprocess function for the dibs_cancel_page theme
 *
 * @param array $variables
 */
function template_preprocess_dibs_cancel_page(&$variables) {
  $transaction = $variables['transaction'];
  $variables['template_files'][] = 'dibs-cancel-page-' . $transaction['api_module'];
  $variables['template_files'][] = 'dibs-cancel-page-' . $transaction['api_module'] . '-' . $transaction['api_delta'];
}

/**
 * Preprocess function for the dibs_accept_page theme
 *
 * @param array $variables
 */
function template_preprocess_dibs_accept_page(&$variables) {
  $transaction = $variables['transaction'];
  $variables['template_files'][] = 'dibs-accept-page-' . $transaction['api_module'];
  $variables['template_files'][] = 'dibs-accept-page-' . $transaction['api_module'] . '-' . $transaction['api_delta'];
}
